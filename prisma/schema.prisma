// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  GUEST
}

model User {
  id              Int       @id @default(autoincrement())
  username        String
  displayName     String
  bio             String
  website         String
  github          String
  password        String
  confirmPassword String
  followers       Followers @relation(fields: [followersId], references: [id])
  followersId     String
  following       Following @relation(fields: [followingId], references: [id])
  followingId     String
  // likedPostByUsers Post @relation(fields: [likedPostByUsersId], references: [id])
  // likedPostByUsersId Int
  postAuthor      Post[]
  commentOnPost Comments @relation(fields: [commentId], references: [id])
  commentId Int

  @@map("user")
}

model Followers {
  id             String @id @default(uuid())
  followersUsers User[]

  @@map("followers")
}

model Following {
  id             String @id @default(uuid())
  followingUsers User[]

  @@map("following")
}

model Post {
  id       Int    @id @default(autoincrement())
  content  String
  imageURL String
  tag      String
  like     Int
  comments Int
  // likedPostByUsers User[]
  author   User   @relation(fields: [authorId], references: [id])
  authorId Int
  commentsOnPost Comments[]

  @@map("post")
}

model Comments {
  id Int @id @default(autoincrement())
  content String
  comments User[]
  post Post @relation(fields: [postId], references: [id])
  postId Int
}