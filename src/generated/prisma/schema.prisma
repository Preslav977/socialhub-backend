// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("TEST_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  GUEST
}

model User {
  id                 Int        @id @default(autoincrement())
  username           String     @unique
  display_name       String     @unique
  bio                String
  website            String
  github             String
  password           String
  confirm_password   String
  profile_picture    String
  role               Role       @default(USER)
  followedBy         User[]     @relation("UserFollows")
  following          User[]     @relation("UserFollows")
  posts              Int?
  likedPosts         Post[]     @relation("UserLikedPosts")
  createdPostsByUser Post[]
  commentsOnPosts    Comments[]
  senderChat         Chat[]     @relation("senderChat")
  receiverChat       Chat[]     @relation("receiverChat")
  senderMessage      Messages[] @relation("senderMessage")
  receiverMessage    Messages[] @relation("receiverMessage")

  @@map("user")
}

model Post {
  id                   Int        @id @default(autoincrement())
  content              String
  imageURL             String?
  tag                  String
  likes                Int
  comments             Int
  createdAt            DateTime   @default(now())
  postLikedByUsers     User[]     @relation("UserLikedPosts")
  author               User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId             Int
  postCommentedByUsers Comments[]

  @@map("post")
}

model Comments {
  id                     Int        @id @default(autoincrement())
  text                   String
  commentLeftByUser      User       @relation(fields: [commentLeftByUserId], references: [id], onDelete: Cascade)
  commentLeftByUserId    Int
  createdAt              DateTime   @default(now())
  commentRelatedToPost   Post?      @relation(fields: [commentRelatedToPostId], references: [id], onDelete: Cascade)
  commentRelatedToPostId Int?
  parentComment          Comments?  @relation("CommentReply", fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId        Int?
  childCommentReply      Comments[] @relation("CommentReply")

  @@map("comments")
}

model Chat {
  id             String     @id @default(uuid())
  senderChatId   Int
  senderChat     User       @relation("senderChat", fields: [senderChatId], references: [id], onDelete: Cascade)
  receiverChatId Int
  receiverChat   User       @relation("receiverChat", fields: [receiverChatId], references: [id], onDelete: Cascade)
  messages       Messages[]

  @@map("chat")
}

model Messages {
  id                Int      @id @default(autoincrement())
  text              String
  imageURL          String?
  createdAt         DateTime @default(now())
  senderMessageId   Int
  senderMessage     User     @relation("senderMessage", fields: [senderMessageId], references: [id], onDelete: Cascade)
  receiverMessageId Int
  receiverMessage   User     @relation("receiverMessage", fields: [receiverMessageId], references: [id], onDelete: Cascade)
  chat              Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId            String

  @@map("messages")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
